/*
 * File: app/view/ProcessTimeSeries.js
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('istsos.view.ProcessTimeSeries', {
    extend: 'istsos.view.ui.ProcessTimeSeries',
    alias: 'widget.viewerpanel1',

    initComponent: function() {
        var me = this;
        me.callParent(arguments);

        this.pchoose = Ext.getCmp('pchoose');
        this.chartpanel = Ext.getCmp('chartpanel');

        //OAT time series method panel
        this.serieschartpanel = Ext.getCmp('serieschartpanel');
        this.chartpanel1=Ext.getCmp('chartpanelmethod');
        timeSeriesGraph=Ext.getCmp('timeSeriesGraph');
        //OAT Method panel and execute and download buttons
        var methodpanel=Ext.getCmp('methodstabs');
        var methodserch=Ext.getCmp('buttonExecute');
        var downloadResult=Ext.getCmp('buttonSave');
        methodpanel.disable();
        methodserch.disable();
        downloadResult.disable();

        //Variable for download csv header name, csv header data, csv data and history 
        var historyString='';
        this.rst_header;
        this.rst_data;
        this.rst_name;

        this.pchoose.on("procedureAdded",function(procedure) {
            this.chartpanel.addProcedure(procedure);
            methodserch.enable();
            methodpanel.enable();
        },this);
        
        this.pchoose.on("procedureRemoved",function(procedure) {
            this.chartpanel.removeProcedure(procedure);
        },this);
        
        //Var for OAT methods panel
        var digital_filter = Ext.getCmp('digitalPanel');
        var exeedance = Ext.getCmp('exeedancePanel');
        var resample = Ext.getCmp('resamplePanel');
        var integrate = Ext.getCmp('integratePanel');
        var regularization = Ext.getCmp('regularizationPanel');
        var fill = Ext.getCmp('fillPanel1');
        var dataValues = Ext.getCmp('DataValuesPanel');
        var quality = Ext.getCmp('qualityPanel');
        var statistics = Ext.getCmp('StataticsPanel');
        var hydro_indices = Ext.getCmp('HydroIndicesPanel');
        var hydro_events = Ext.getCmp('HydroEventsPanel');
        var hargreaves = Ext.getCmp('hargreavesPanel');
        var compare = Ext.getCmp('ComparePanel');
        var subtract = Ext.getCmp('SubtractPanel');
        var hydro_separation = Ext.getCmp('HydroSeparationPanel');        

        //Combox for choose OAT Methods and select from the combox
        Ext.getCmp("methodsCombox").select(0);
        Ext.getCmp("methodsCombox").on("select",function(combo, records, eOpts){
            digital_filter.setVisible(false);
            exeedance.setVisible(false);
            resample.setVisible(false);
            integrate.setVisible(false);
            regularization.setVisible(false);
            fill.setVisible(false);
            dataValues.setVisible(false);
            quality.setVisible(false);
            statistics.setVisible(false);
            hydro_indices.setVisible(false);
            hydro_events.setVisible(false);
            hargreaves.setVisible(false);
            compare.setVisible(false);
            subtract.setVisible(false);
            hydro_separation.setVisible(false);
            //OAT method name position value
            var value = combo.getValue();

            switch (value) {
                case 0:
                    digital_filter.setVisible(true);
                  break;
                case 1:
                    exeedance.setVisible(true);
                  break;
                case 2:
                    resample.setVisible(true);
                  break;
                case 3:
                    integrate.setVisible(true);
                  break;
                case 4:
                    compare.setVisible(true);
                  break;
                case 5:
                    subtract.setVisible(true);
                    break;
                case 6:
                    hydro_separation.setVisible(true);
                    break;
                case 7:
                    hydro_events.setVisible(true);
                    break;
                case 8:
                    hydro_indices.setVisible(true);
                    break;
                case 9:
                    statistics.setVisible(true);
                    break;
                case 10:
                    fill.setVisible(true);
                    break;
                case 11:
                    quality.setVisible(true);
                    break;
                case 12:
                    dataValues.setVisible(true);
                    break;
                case 13:
                    hargreaves.setVisible(true);
                    break;
            }
        });

        Ext.getCmp("buttonExecute").on("click",function(btn, e, eOpts){
            // For History(View) 
            var textHistory=Ext.getCmp('textAreaHistory');
            //Dygraph Chart Plotting
            var chartPlot=Ext.getCmp('chartSeries');
            //Show result in table
            var show_result=Ext.getCmp('show_result');
            //Show Download Result button
            downloadResult.enable();
            // Selected data to perform OAT methods
            var resdata=this.SelectedPropertyData();
            //time data
            var resdata1=resdata[0];
            //value data
            var resdata2=resdata[1];
            //quality data
            var resdata3=resdata[2];
            //OAT methods Chooser
            var methods=Ext.getCmp("methodsCombox").getValue();
            // resample
            if (methods == 0)
            {
                //Taking Input
                var digLow= Ext.getCmp("digLowcutOff").getValue();
                var digHigh= Ext.getCmp("digHigcutOff").getValue();
                var digOrder= Ext.getCmp("digOrder").getValue();
                var digiType= Ext.getCmp("digiType").getValue();

                
                chartPlot.setVisible(true);
                show_result.setVisible(false);

                historyString=historyString+"Filter Digital Filter Params:  Integrate Low cut-off:["+digLow+"] | High cut-off: ["+digHigh+"]  Order:["+digOrder+"] | Type: ["+digiType+"]\n";
                textHistory.setValue(historyString);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/digitalfilter', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "dlow":digLow,
                        "dhigh":digHigh,
                        "dorder":digOrder,
                        "dfilter":digiType,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log(json1);
                        // for (var i = 0; i < json1["data"].length; i++) {
                        //         frequency=json1["data"][i][frequency];
                        //         percentage=json1["data"][i][percentage];
                        //         value=json1["data"][i][value];
                        //         exeeResult=+"\nfrequency : "+frequency+" percentage : "+percentage+" value : "+value;
                        // }
                        //         // for(var i=0;i<test.length;i++){
                        //         // }
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 1)
            {
                var frequency;
                var percentage;
                var value;

                //Taking Input
                var exceeValues= Ext.getCmp("exeeValues").getValue();
                var exceeProbability= Ext.getCmp("exeeProbability").getValue();
                var exceeTime= Ext.getCmp("exeeTime").getValue();
                var exceeUnder= Ext.getCmp("exeeUnder").getValue();


                chartPlot.setVisible(false);
                show_result.setVisible(true);

                historyString="Filter Exeedance Params:  Exeedance Values:["+exceeValues+"] | Exeedance Probability:["+exceeProbability+"] | Exeedance Time:["+exceeTime+"] | Exeedance Under:["+exceeUnder+"]\n"+historyString;
                textHistory.setValue(historyString);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/exceedance', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "exceevalues":exceeValues,
                        "exceeperc":exceeProbability,
                        "etu":exceeTime,
                        "exceeunder":exceeUnder,
                        "index1": resdata1,
                        "values1": resdata2
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        //Table
                        var csv_array=json1['data'];
                        data = JSON.parse(JSON.stringify(csv_array));
                        console.log(data);
                        this.tabulate(data,['percentage', 'frequency','value']);
                        //Download data
                        this.rst_header = 'Exeedance Params\npercentage,frequency,value\n';
                        this.rst_data=csv_array;
                        this.rst_name='Exeedance';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }
            if (methods == 2)
            {

                var frequency= Ext.getCmp("edittextFrequency").getValue();
                var timeSeriesMethods= Ext.getCmp("comboxSmapling").getValue();
                var fillCombox= Ext.getCmp("comboxFill").getValue();
                var Limit= Ext.getCmp("comboxLimit").getValue();
                var Quality= Ext.getCmp("comboxHowquality").getValue();
                var textHistory=Ext.getCmp('textAreaHistory');
                // istsos.view.ProcessTimeSeries.dataAccess();
                Ext.get('chartSeries').mask("Initializing chart..");

                chartPlot.setVisible(true);
                show_result.setVisible(false);
                rst_header = 'Resample\ntime,values\n';

                historyString="Filter Resample Params: frequency:["+frequency+"] | How:["+timeSeriesMethods+"] | fill: ["+fillCombox+"] | Limit:["+Limit+"] |  Quality:["+Quality+"]\n"+historyString;
                textHistory.setValue(historyString);
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/resample', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "freq":frequency,
                        "sampling":timeSeriesMethods,
                        "fill":fillCombox,
                        "limit":Limit,
                        "Quality":Quality,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3
                        // "seriesdata":data
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        // var x=Object.keys(test['value']);
                        // var y=Object.values(test['value']);
                        // console.log(x,y);
                        
                        //Graph Plot Section Hargreaves
                        this.chartdata =json1['data'];
                        this.draw_result_chart(this.chartdata);

                        //Download Data Section Hargreaves
                        // rst_header = 'Resample Params\ntime,value\n';
                        this.rst_data=this.download_format(json1);
                        this.rst_name='Resample';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }
            if (methods == 3)
            {
                //Taking Input
                var intgTimeUnit= Ext.getCmp("timeUnitsCombox").getValue();
                var intgHow= Ext.getCmp("comboxIntegrateFlow").getValue();
                var intgFactor= Ext.getCmp("integratefactor").getValue();
                var intgDateAsText= Ext.getCmp("integratedateastext").getValue();

                //Use Time for calculation statistics
                var timeuse= Ext.getCmp("checkUsetime").getValue();
                //Time(Begin)
                var from = Ext.getCmp('edittextintegrateBegin').getValue();
                var bt = Ext.getCmp('edittextintegrateBeginTime').getValue();
                //Time(End)
                var to = Ext.getCmp('edittextintegrateEnd').getValue();
                var et = Ext.getCmp('edittextintegrateEndTime').getValue();
                //Time(Timezone)
                var timezone= Ext.getCmp("integrateTimezone").getValue();
                if(timeuse==true){
                    from.setHours(bt.getHours());
                    from.setMinutes(bt.getMinutes());
                    from.setSeconds(bt.getSeconds());
                    
                    to.setHours(et.getHours());
                    to.setMinutes(et.getMinutes());
                    to.setSeconds(et.getSeconds());

                    var format = "Y-m-d H:i:s";
                    from = Ext.Date.format(from,format);
                    to = Ext.Date.format(to,format);
                }

                
                chartPlot.setVisible(false);
                show_result.setVisible(true);
                console.log(from);
                console.log(to);

                historyString="Filter Integrate Params:  Integrate Time Unit:["+intgTimeUnit+"] | Use Time:["+timeuse+"] | Begin Time:["+from+"] | End Time:["+to+"] | TimeZone:["+timezone+"] | How:["+intgHow+"] | Factor:["+intgFactor+"] | DateAsText:["+intgDateAsText+"]\n"+historyString;
                textHistory.setValue(historyString);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/intgrate', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3,
                        "itimeunit":intgTimeUnit,
                        "ihow":intgHow,
                        "ifactor":intgFactor,
                        "iusetime":timeuse,
                        "ibegin":from,
                        "iend":to,
                        "itimezone":timezone,
                        "idataastext":intgDateAsText,
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        //Table
                        var csv_array=json1['data'];
                        var data = JSON.parse(JSON.stringify(csv_array));
                        this.tabulate(data,['from', 'to','value']);
                        //Download data
                        this.rst_header = 'Integrate Params\nfrom,to,value\n';
                        this.rst_data=csv_array;
                        this.rst_name='Integration';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 4)
            {
                //Taking Input
                var fillMethod= Ext.getCmp("fillMethod").getValue();
                var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();

                
                chartPlot.setVisible(false);
                show_result.setVisible(false);

                historyString="Filter Integrate Params:  Integrate Time Unit:["+intgTimeUnit+"] | Use Time:["+intgUseTime+"] | Begin Time:["+intgBegin+"] | End Time: ["+intgEnd+"] | TimeZone:["+intgTimeZone+"] | How:["+intgHow+"] | Factor:["+intgFactor+"] | DateAsText: ["+intgDateAsText+"]\n"+historyString;
                textHistory.setValue(historyString);
            }

            if (methods == 5)
            {
                // Data
                var resdata=this.SelectedPropertyData();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=resdata[2];

                //Taking Input
                var fillMethod= Ext.getCmp("fillMethod").getValue();
                var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();

                var exeeResult="";

                
                chartPlot.setVisible(false);
                show_result.setVisible(false);
                
                historyString="Filter Integrate Params:  Integrate Time Unit: "+intgTimeUnit+"  Use Time: "+intgUseTime+"  Begin Time: "+intgBegin+"  End Time: "+intgEnd+"  TimeZone: "+intgTimeZone+"  How: "+intgHow+"  Factor: "+intgFactor+"  DateAsText: "+intgDateAsText+"\n"+historyString;
                textHistory.setValue(historyString);

            }
            if (methods == 6)
            {
                //Taking Input
                var hsmode1= Ext.getCmp("HSmode").getValue();
                var hsalpha1= Ext.getCmp("HSalpha").getValue();
                var bsalpha1= Ext.getCmp("bsalpha").getValue();
                
                chartPlot.setVisible(true);
                show_result.setVisible(false);

                Ext.get('chartSeries').mask("Initializing chart..");

                historyString="Filter Hydro Separation Params:  mode:["+hsmode1+"] | alpha:["+hsalpha1+"] | bsalpha:["+bsalpha1+"]\n"+historyString;
                textHistory.setValue(historyString);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/hysap', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        'hsmode':hsmode1,
                        'hsalpha':hsalpha1,
                        'hsbfl':bsalpha1,
                        'index1': resdata1,
                        'values1': resdata2,
                        'qual': resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);

                        //Graph Plot Section Hargreaves
                        this.chartdata =json1['data'];
                        this.hydro_separation_chart(this.chartdata);
                        //Download Data Section Hargreaves
                        this.rst_header = 'Hydro Saparation Params\ntime,base,runoff\n';
                        this.rst_data=this.download_format(json1);
                        this.rst_name='HydroSeparation';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 7)
            {
                //Taking Input
                var hyerise= Ext.getCmp("herise").getValue();
                var hyefall= Ext.getCmp("hefall").getValue();
                var hyewindow= Ext.getCmp("hewindow").getValue();
                var hyepeak= Ext.getCmp("hepeak").getValue();
                var hyeseries= Ext.getCmp("heseries").getValue();

                //Use Time for calculation statistics
                var timeuse= Ext.getCmp("hetime").getValue();
                //Time(Begin)
                var from = Ext.getCmp('hebeg').getValue();
                var bt = Ext.getCmp('hebegTime').getValue();
                //Time(End)
                var to = Ext.getCmp('heend').getValue();
                var et = Ext.getCmp('heendTime').getValue();
                //Time(Timezone)
                if(timeuse==true){
                    from.setHours(bt.getHours());
                    from.setMinutes(bt.getMinutes());
                    from.setSeconds(bt.getSeconds());
                    
                    to.setHours(et.getHours());
                    to.setMinutes(et.getMinutes());
                    to.setSeconds(et.getSeconds());

                    var format = "Y-m-d H:i:s";
                    from = Ext.Date.format(from,format);
                    to = Ext.Date.format(to,format);
                }


                Ext.get('chartSeries').mask("Initializing chart..");
                
                chartPlot.setVisible(true);
                show_result.setVisible(false);

                historyString="Filter Hydro Events Params: rise:["+hyerise+"] | fall:["+hyefall+"] | window:["+hyewindow+"] | peak:["+hyepeak+"] | series:["+hyeseries+"] | period:["+timeuse+"] | begin:["+from+"] | end:["+to+"]\n"+historyString;
                textHistory.setValue(historyString);


                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/he', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "hydrise":hyerise,
                        "hydfall":hyefall,
                        "hydwindow":hyewindow,
                        "hydpeak":hyepeak,
                        "hydseries":hyeseries,
                        "hydtime":timeuse,
                        "hydbeg":from,
                        "hydend":to,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        this.chartdata = [];
                        for (var i =0;i<json1['data'].length; i++) {
                            for(var j=0; j<json1['data'][i].length;j++){
                                var rec = [];
                                rec.push(parseInt(json1['data'][i][j][0]));
                                var vals1 = json1['data'][i][j][2];
                                rec = rec.concat(vals1);
                                for(var k=0;k<json1['data'].length;k++){
                                    if(k==i){
                                        var vals = json1['data'][i][j][1];
                                        rec = rec.concat(vals);
                                    }else{
                                        var vals = null;
                                        rec = rec.concat(vals);
                                    }
                                }
                                this.chartdata.push(rec);
                            }
                        }
                        this.chartdata2=this.chartdata;
                        var arr = [];
                        for (var key in this.chartdata) {
                            if (this.chartdata2.hasOwnProperty(key)) {
                                arr.push(this.chartdata2[key]);
                            }
                        }
                        arr.sort();
                        this.hydro_events_chart(arr);
                        //Download Section
                        this.rst_header = 'Hydro Events Params\ntime,quality,Event1,Event2,Event3,Event4,Event5,Event6,Event7\n';
                        var csv_array=json1['data'];
                        this.rst_data=csv_array;
                        this.rst_name='HydroEvents';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 8)
            {
                //Taking Input
                var hialphacode= Ext.getCmp("alphacode").getValue();
                var hiindicies= Ext.getCmp("indicies").getValue();
                var hicomponent= Ext.getCmp("cbcompo").getValue();
                var hiclass= Ext.getCmp("cbclass").getValue();
                var himedian= Ext.getCmp("cbmedian").getValue();
                var hidrainArea= Ext.getCmp("drainArea").getValue();

                //Use Time for calculation statistics
                var timeuse= Ext.getCmp("cbperiod").getValue();
                //Time(Begin)
                var from = Ext.getCmp('hibegin').getValue();
                var bt = Ext.getCmp('hibeginTime').getValue();
                //Time(End)
                var to = Ext.getCmp('hiend').getValue();
                var et = Ext.getCmp('hiendTime').getValue();
                //Time(Timezone)
                if(timeuse==true){
                    from.setHours(bt.getHours());
                    from.setMinutes(bt.getMinutes());
                    from.setSeconds(bt.getSeconds());
                    
                    to.setHours(et.getHours());
                    to.setMinutes(et.getMinutes());
                    to.setSeconds(et.getSeconds());

                    var format = "Y-m-d H:i:s";
                    from = Ext.Date.format(from,format);
                    to = Ext.Date.format(to,format);
                }

                Ext.get('chartSeries').mask("Initializing chart..");

                
                chartPlot.setVisible(false);
                show_result.setVisible(true);

                historyString="Filter Hydro indicies Params:  alphacode: ["+hialphacode+"]  |  code indicies: ["+hiindicies+"]  |  component: ["+hicomponent+"]  |  classification: ["+hiclass+"]  |  median: ["+himedian+"] | drain area: ["+hidrainArea+"]  |  period: ["+timeuse+"]  |  begin: ["+from+"]  |  end: ["+to+"]\n"+historyString;
                textHistory.setValue(historyString);
        

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/hi', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "hialpha":hialphacode,
                        "hiindi":hiindicies,
                        "hicomp":hicomponent,
                        "hicss":hiclass,
                        "himed":himedian,
                        "hiper":timeuse,
                        "hida":hidrainArea,
                        "hib":from,
                        "hie":to,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual": resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        var csv_array=json1['data']['data'];
                        //Table show 
                        data = JSON.parse(JSON.stringify(csv_array));
                        this.tabulate(data,['index', 'value']);
                        //Download data
                        this.rst_header = 'Hydro indicies Params\n index,value\n';
                        this.rst_data=csv_array;
                        this.rst_name='HydroIndices';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 9)
            {
                //Taking Input
                var dataSta= Ext.getCmp("dataSta").getValue();
                var quaSta= Ext.getCmp("quaSta").getValue();
            
                //Use Time for calculation statistics
                var timeSta= Ext.getCmp("timeUseSta").getValue();
                //Time(Begin)
                var from = Ext.getCmp('beginSta').getValue();
                var bt = Ext.getCmp('beginStaTime').getValue();
                //Time(End)
                var to = Ext.getCmp('endSta').getValue();
                var et = Ext.getCmp('endStaTime').getValue();
                //Time(Timezone)
                var timezoneSta= Ext.getCmp("timezoneSta").getValue();
                if(timeSta==true){
                    from.setHours(bt.getHours());
                    from.setMinutes(bt.getMinutes());
                    from.setSeconds(bt.getSeconds());
                    
                    to.setHours(et.getHours());
                    to.setMinutes(et.getMinutes());
                    to.setSeconds(et.getSeconds());

                    var format = "Y-m-d H:i:s";
                    from = Ext.Date.format(from,format);
                    to = Ext.Date.format(to,format);
                }

                
                chartPlot.setVisible(false);
                show_result.setVisible(true);

                historyString="Filter Statistics Params: data: ["+dataSta+"]|  quality: ["+quaSta+"]|  time: ["+timeSta+"]|  beginSta: ["+from+"]|  end: ["+to+"]|  timezone: ["+timezoneSta+"]\n"+historyString;
                textHistory.setValue(historyString);
                

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/statistics', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "dataSta":dataSta,
                        "quaSta":quaSta,
                        "timeSta":timeSta,
                        "beginSta":from,
                        "endSta": to,
                        "timezoneSta": timezoneSta,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual": resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        this.rst_header = 'Statistics Params\ncount,std,min,max,50%,25%,75%,mean\n';
                        this.rst_name='Statistics';
                        var initialData;
                        var data;
                        if(dataSta && quaSta){
                            initialData = [
                                { data: "count", quality: json1['data']['quality']['count'], value: json1['data']['data']['count']},
                                  { data: "std", quality: json1['data']['quality']['std'], value: json1['data']['data']['std']},
                                  { data: "mean", quality: json1['data']['quality']['mean'],value : json1['data']['data']['mean']},
                                  { data: "max", quality: json1['data']['quality']['max'], value: json1['data']['data']['max'] },
                                  { data: "min", quality: json1['data']['quality']['min'], value: json1['data']['data']['min'] },
                                  { data: "25%", quality: json1['data']['quality']['25%'], value: json1['data']['data']['25%'] },
                                  { data: "50%", quality: json1['data']['quality']['50%'], value: json1['data']['data']['50%'] },
                                  { data: "75%", quality: json1['data']['quality']['75%'], value: json1['data']['data']['75%'] }
                                ]
                            rst_data=[json1['data']['data'],json1['data']['quality']];
                            data = JSON.parse(JSON.stringify(initialData));
                            this.tabulate(data,['data', 'value','quality']);
                        }else{
                            initialData = [
                                  { data: "Count", value: json1['data']['count'] },
                                  { data: "std", value: json1['data']['std'] },
                                  { data: "mean", value: json1['data']['mean'] },
                                  { data: "max", value: json1['data']['max'] },
                                  { data: "min", value: json1['data']['min'] },
                                  { data: "25%", value: json1['data']['25%'] },
                                  { data: "50%", value: json1['data']['50%'] },
                                  { data: "75%", value: json1['data']['75%'] }
                            ]
                            var csv_array=json1['data'];
                            data = JSON.parse(JSON.stringify(initialData));
                            this.tabulate(data,['data', 'value']);
                            this.rst_data=[csv_array];
                        }
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 10)
            {
                //Taking Input
                var fillMethod= Ext.getCmp("fillMethod").getValue();
                var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();

                Ext.get('chartSeries').mask("Initializing chart..");
                
                chartPlot.setVisible(true);
                show_result.setVisible(false);

                historyString="Filter Fill Params:  filling no data method:["+fillMethod+"] | consucutive no data allowed:["+fillConsucutive+"]\n"+historyString;
                textHistory.setValue(historyString);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/fill', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "fillMethod1":fillMethod,
                        "fillConsucutive1":fillConsucutive,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual": resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);

                        //Graph Plot Section Hargreaves
                        this.chartdata =json1['data'];
                        this.draw_result_chart(this.chartdata);
                        //Download Data Section Hargreaves
                        // this.rst_header = 'Fill Params\ntime,value,quality\n';
                        this.rst_data=this.download_format(json1);
                        this.rst_name='Fill';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 11)
            {
                //Taking Input
                var DataValue= Ext.getCmp("Qvalue").getValue();
                var DataStat= Ext.getCmp("Qstat").getValue();

                var limit=Ext.getCmp("Qlimit").getValue();
                var DataLow= Ext.getCmp("Qlow").getValue();
                var DataHigh= Ext.getCmp("Qhigh").getValue();

                //Use Time for calculation statistics
                var timeuse= Ext.getCmp("Qtime").getValue();
                //Time(Begin)
                var from = Ext.getCmp('Qbegin').getValue();
                var bt = Ext.getCmp('QbeginTime').getValue();
                //Time(End)
                var to = Ext.getCmp('Qend').getValue();
                var et = Ext.getCmp('QendTime').getValue();
                //Time(Timezone)
                var timezone= Ext.getCmp("Qtimezone").getValue();
                if(timeuse==true){
                    from.setHours(bt.getHours());
                    from.setMinutes(bt.getMinutes());
                    from.setSeconds(bt.getSeconds());
                    
                    to.setHours(et.getHours());
                    to.setMinutes(et.getMinutes());
                    to.setSeconds(et.getSeconds());

                    var format = "Y-m-d H:i:s";
                    from = Ext.Date.format(from,format);
                    to = Ext.Date.format(to,format);
                }

                Ext.get('chartSeries').mask("Initializing chart..");

                
                chartPlot.setVisible(true);
                show_result.setVisible(false);

                historyString="Filter Quality Params:  Values:["+DataValue+"] | Statistics:["+DataStat+"] | Time:["+timeuse+"] | Begin:["+from+"] | End:["+to+"] | TimeZone:["+timezone+"] | low:["+DataLow+"] | High:["+DataHigh+"]\n"+historyString;
                textHistory.setValue(historyString);
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/qualitymethod', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3,
                        "qvalue":DataValue,
                        "qstat":DataStat,
                        "qtime":timeuse,
                        "qbegin":from,
                        "qend":to,
                        "qtimezone":timezone,
                        "qlimit":limit,
                        "qlow":DataLow,
                        "qhigh":DataHigh
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);

                        //Graph Plot Section Hargreaves
                        this.chartdata =json1['data'];
                        this.draw_result_chart(this.chartdata);
                        
                        //Download Data Section Hargreaves
                        // rst_header = 'Quality Params\ntime,value\n';
                        this.rst_data=this.download_format(json1);
                        this.rst_name='Quality';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 12)
            {
                //Taking Input
                var DataValue= Ext.getCmp("dvvalue").getValue();

                //Using Limit
                var limit=Ext.getCmp("dvlimit").getValue();
                var DataLow= Ext.getCmp("dvlow").getValue();
                var DataHigh= Ext.getCmp("dvhigh").getValue();

                //Use Time for calculation statistics
                var timeuse= Ext.getCmp("dvtime").getValue();
                //Time(Begin)
                var from = Ext.getCmp('dvbegin').getValue();
                var bt = Ext.getCmp('dvbeginTime').getValue();
                //Time(End)
                var to = Ext.getCmp('dvend').getValue();
                var et = Ext.getCmp('dvendTime').getValue();
                //Time(Timezone)
                var timezone= Ext.getCmp("dvtimezone").getValue();

                if(timeuse==true){
                    from.setHours(bt.getHours());
                    from.setMinutes(bt.getMinutes());
                    from.setSeconds(bt.getSeconds());
                    
                    to.setHours(et.getHours());
                    to.setMinutes(et.getMinutes());
                    to.setSeconds(et.getSeconds());

                    var format = "Y-m-d H:i:s";
                    from = Ext.Date.format(from,format);
                    to = Ext.Date.format(to,format);
                }
                
                Ext.get('chartSeries').mask("Initializing chart..");

                
                chartPlot.setVisible(true);
                show_result.setVisible(false);

                historyString="Filter Data Value Params: Values :["+DataValue+"] | Time: ["+timeuse+"] | Begin: ["+from+"] | End: ["+to+"] | TimeZone: ["+timezone+"] | low: ["+DataLow+"] | High: ["+DataHigh+"]\n"+historyString;
                textHistory.setValue(historyString);
            
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/datavalue', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3,
                        "dvvalue":DataValue,
                        "dvtime":timeuse,
                        "dvbegin":from,
                        "dvend":to,
                        "dvtimezone":timezone,
                        "dvlimit":limit,
                        "dvlow":DataLow,
                        "dvhigh":DataHigh
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);

                        //Graph Plot Section Hargreaves
                        this.chartdata =json1['data'];
                        this.draw_result_chart(this.chartdata);
                        
                        //Download Data Section Hargreaves
                        // rst_header = 'Data Values Params\ntime,value,quality\n';
                        this.rst_data=this.download_format(json1);
                        this.rst_name='Data Value';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 13)
            {
                Ext.get('chartSeries').mask("Initializing chart..");
                
                chartPlot.setVisible(true);
                show_result.setVisible(false);

                historyString="Filter Hargreaves Params:  Hargreaves "+"\n"+historyString;
                textHistory.setValue(historyString);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/hargreaves', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        //Graph Plot Section Hargreaves
                        this.chartdata =json1['data'];
                        this.draw_result_chart(this.chartdata);
                        //Download Data Section Hargreaves
                        // rst_header = 'Hargreaves Params\ntime,value,quality\n';
                        this.rst_data=this.download_format(json1);
                        this.rst_name='Hargreaves';
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

        },this);

        Ext.getCmp("buttonSave").on("click",function(btn, e, eOpts){
            this.download_csv(this.rst_data,this.rst_header,this.rst_name);
        },this);
        Ext.getCmp("checkboxOverwrite").on("click",function(btn, e, eOpts){
            console.log('checkboxOverwrite');
        },this);

        /*Ext.getCmp('chartpanel').on("underlayCallback",function(panel, e, x, pts) {
            console.log("underlayCallback:");
            console.dir(arguments);
        });*/
    },
    draw_result_chart: function(chartdata){
            this.chartdata=chartdata;
            // this.obsprop = Ext.getCmp("oeCbObservedProperty").getValue();
            // var procs = [];
            // get the json rapresentation of the tree menu of procedures
            //var checked = Ext.getCmp('proceduresTree').getValues();
            var visibility = []; // Initialize the chart series visibility

            this.labels = ["isodate"];
            this.colors = [];
            var template = [];

            var valueFormatter = {

            }


            var initChart = true;
            if (initChart) {
                this.chart = new Dygraph(
                    document.getElementById("chartSeries-body"),
                    this.chartdata,
                    {
                        labels: [ 'Date', 'Value', 'Quality','Quality1','Quality2','Quality3','Quality4'],
                        xlabel:'Time',
                        ylabel: 'Value',
                        y2label: 'Quality',
                        'Quality': {
                          axis: {
                          }
                        },
                        strokeWidth: 2,
                        digitsAfterDecimal: 6,
                        connectSeparatedPoints: true,
                        //visibility: visibility,
                        legend: 'always',
                        showRangeSelector: true,
                        showRoller: true,
                        rangeSelectorHeight: 30,
                        rangeSelectorPlotStrokeColor: 'black',
                        rangeSelectorPlotFillColor: 'green',
                        labelsDivStyles: {
                            'padding': '4px',
                            'border': '1px solid black',
                            'borderRadius': '3px',
                            'boxShadow': '4px 4px 4px #888',
                            'right': '10px'
                        },
                        labelsDivWidth: "100%",
                        axisLineColor: 'green',
                        axisLabelFontSize: 12,
                        axisLabelWidth: 150,
                        xAxisLabelWidth: 150,
                        highlightCircleSize: 4,
                        colors: ['blue', 'red','green','gray','brown','yellow'],
                        axes: Ext.apply({
                            x: {
                                valueFormatter: function(ms) {
                                    return istsos.utils.micro2iso(ms,istsos.utils.tzToMinutes(Ext.getCmp('oeTZ').getValue()));
                                },
                                axisLabelFormatter: function(ms, gran, b, chart){
                                        // Get unix time in seconds
                                    var unix = parseInt(ms/1000000);
                                    // Extract microseconds only
                                    var micro = ms-(unix*1000000);
                                    // Date object without considering microseconds
                                    var date = Ext.Date.parse(unix,'U');

                                    var range = chart.xAxisRange();
                                    var delta = range[1]-range[0];

                                    var clip = function(m){
                                        return (parseFloat('0.'+m)+"").substring(1);
                                    }
                                    if (delta<500000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==200000 || micro==400000 || micro==600000 || micro==800000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if (delta<1000000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==500000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if(delta<1000000*60) { // less the a minute
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i:s')+clip(micro);
                                        }
                                    }else if(delta<1000000*60*60) { // less the an hour
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d') + "T" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24*4) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12) {
                                            return Ext.Date.format(date,'Y-m-d') + "<br>" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else  { // less the a day
                                        return Ext.Date.format(date,'Y-m-d');
                                    }

                                }
                            },
                            y: {
                                valueFormatter: function(y) {
                                  return y;
                                },
                                axisLabelFormatter: function(y) {
                                  return y;
                                }
                            },
                            y2: {
                                valueFormatter: function(y2) {
                                  return y2;
                                },
                                axisLabelFormatter: function(y2) {
                                  return parseInt(y2);
                                }
                            }
                        },valueFormatter),
                        clickCallback: function(e, x, pts) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            // Series selectd
                            if (e.shiftKey && chartpanel.lastClick) {
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("seriesSelected", this, e, x, this.lastClick, pts);
                                }, chartpanel, [e, x, pts]);

                            }else{ // Single point selected
                                chartpanel.lastClick = x;
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("clickCallback", this, e, x, pts);
                                }, chartpanel, [e, x, pts]);
                            }

                        },
                        pointClickCallback: function(e, p) {

                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(e, p){
                                this.fireEvent("clickCallback", this, e, p['xval']);
                            }, chartpanel, [e, p]);
                        },
                        underlayCallback: function(canvas, area, g) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(canvas, area, g){
                                this.fireEvent("underlayCallback", this, canvas, area, g);
                            }, chartpanel, [canvas, area, g]);
                        }
                    }
                    );
            }else if (!Ext.isEmpty(this.chart)) {
                this.chart.updateOptions({
                    file: this.chartdata,
                    visibility: visibility,
                    labels: this.labels
                });
            }
            Ext.get('chartSeries-body').removeCls("viewerChart");
            Ext.get('chartSeries').unmask();
    },
    hydro_events_chart: function(chartdata){
            this.chartdata=chartdata;
            // this.obsprop = Ext.getCmp("oeCbObservedProperty").getValue();
            // var procs = [];
            // get the json rapresentation of the tree menu of procedures
            //var checked = Ext.getCmp('proceduresTree').getValues();
            var visibility = []; // Initialize the chart series visibility

            this.labels = ["isodate"];
            this.colors = [];
            var template = [];

            var valueFormatter = {

            }


            var initChart = true;
            if (initChart) {
                this.chart = new Dygraph(
                    document.getElementById("chartSeries-body"),
                    this.chartdata,
                    {
                        labels: [ 'Date','Quality','Event1','Event2','Event3','Event4','Quality5'],
                        xlabel:'Time',
                        ylabel: 'Value',
                        y2label: 'Quality',
                        'Quality': {
                          axis: {
                          }
                        },
                        strokeWidth: 2,
                        digitsAfterDecimal: 6,
                        connectSeparatedPoints: true,
                        //visibility: visibility,
                        legend: 'always',
                        showRangeSelector: true,
                        showRoller: true,
                        rangeSelectorHeight: 30,
                        rangeSelectorPlotStrokeColor: 'black',
                        rangeSelectorPlotFillColor: 'green',
                        labelsDivStyles: {
                            'padding': '4px',
                            'border': '1px solid black',
                            'borderRadius': '3px',
                            'boxShadow': '4px 4px 4px #888',
                            'right': '10px'
                        },
                        labelsDivWidth: "100%",
                        axisLineColor: 'green',
                        axisLabelFontSize: 12,
                        axisLabelWidth: 150,
                        xAxisLabelWidth: 150,
                        highlightCircleSize: 4,
                        colors: ['red', 'blue','purple','green','orange','brown'],
                        axes: Ext.apply({
                            x: {
                                valueFormatter: function(ms) {
                                    return istsos.utils.micro2iso(ms,istsos.utils.tzToMinutes(Ext.getCmp('oeTZ').getValue()));
                                },
                                axisLabelFormatter: function(ms, gran, b, chart){
                                        // Get unix time in seconds
                                    var unix = parseInt(ms/1000000);
                                    // Extract microseconds only
                                    var micro = ms-(unix*1000000);
                                    // Date object without considering microseconds
                                    var date = Ext.Date.parse(unix,'U');

                                    var range = chart.xAxisRange();
                                    var delta = range[1]-range[0];

                                    var clip = function(m){
                                        return (parseFloat('0.'+m)+"").substring(1);
                                    }
                                    if (delta<500000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==200000 || micro==400000 || micro==600000 || micro==800000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if (delta<1000000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==500000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if(delta<1000000*60) { // less the a minute
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i:s')+clip(micro);
                                        }
                                    }else if(delta<1000000*60*60) { // less the an hour
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d') + "T" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24*4) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12) {
                                            return Ext.Date.format(date,'Y-m-d') + "<br>" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else  { // less the a day
                                        return Ext.Date.format(date,'Y-m-d');
                                    }

                                }
                            },
                            y: {
                                valueFormatter: function(y) {
                                  return y;
                                },
                                axisLabelFormatter: function(y) {
                                  return y;
                                }
                            },
                            y2: {
                                valueFormatter: function(y2) {
                                  return y2;
                                },
                                axisLabelFormatter: function(y2) {
                                  return parseInt(y2);
                                }
                            }
                        },valueFormatter),
                        clickCallback: function(e, x, pts) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            // Series selectd
                            if (e.shiftKey && chartpanel.lastClick) {
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("seriesSelected", this, e, x, this.lastClick, pts);
                                }, chartpanel, [e, x, pts]);

                            }else{ // Single point selected
                                chartpanel.lastClick = x;
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("clickCallback", this, e, x, pts);
                                }, chartpanel, [e, x, pts]);
                            }

                        },
                        pointClickCallback: function(e, p) {

                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(e, p){
                                this.fireEvent("clickCallback", this, e, p['xval']);
                            }, chartpanel, [e, p]);
                        },
                        underlayCallback: function(canvas, area, g) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(canvas, area, g){
                                this.fireEvent("underlayCallback", this, canvas, area, g);
                            }, chartpanel, [canvas, area, g]);
                        }
                    }
                    );
            }else if (!Ext.isEmpty(this.chart)) {
                this.chart.updateOptions({
                    file: this.chartdata,
                    visibility: visibility,
                    labels: this.labels
                });
            }
            Ext.get('chartSeries-body').removeCls("viewerChart");
            Ext.get('chartSeries').unmask();
    },
    hydro_separation_chart: function(chartdata){
            this.chartdata=chartdata;
            // this.obsprop = Ext.getCmp("oeCbObservedProperty").getValue();
            // var procs = [];
            // get the json rapresentation of the tree menu of procedures
            //var checked = Ext.getCmp('proceduresTree').getValues();
            var visibility = []; // Initialize the chart series visibility

            this.labels = ["isodate"];
            this.colors = [];
            var template = [];

            var valueFormatter = {

            }
            var initChart = true;
            if (initChart) {
                this.chart = new Dygraph(
                    document.getElementById("chartSeries-body"),
                    this.chartdata,
                    {
                        labels: [ 'Date', 'Base', 'Runoff'],
                        xlabel:'Time',
                        ylabel: 'Value',
                        y2label: 'Quality',
                        'Quality': {
                          axis: {
                          }
                        },
                        strokeWidth: 2,
                        digitsAfterDecimal: 6,
                        connectSeparatedPoints: true,
                        //visibility: visibility,
                        legend: 'always',
                        showRangeSelector: true,
                        showRoller: true,
                        rangeSelectorHeight: 30,
                        rangeSelectorPlotStrokeColor: 'black',
                        rangeSelectorPlotFillColor: 'green',
                        labelsDivStyles: {
                            'padding': '4px',
                            'border': '1px solid black',
                            'borderRadius': '3px',
                            'boxShadow': '4px 4px 4px #888',
                            'right': '10px'
                        },
                        labelsDivWidth: "100%",
                        axisLineColor: 'green',
                        axisLabelFontSize: 12,
                        axisLabelWidth: 150,
                        xAxisLabelWidth: 150,
                        highlightCircleSize: 4,
                        colors: ['blue', 'red'],
                        axes: Ext.apply({
                            x: {
                                valueFormatter: function(ms) {
                                    return istsos.utils.micro2iso(ms,istsos.utils.tzToMinutes(Ext.getCmp('oeTZ').getValue()));
                                },
                                axisLabelFormatter: function(ms, gran, b, chart){
                                        // Get unix time in seconds
                                    var unix = parseInt(ms/1000000);
                                    // Extract microseconds only
                                    var micro = ms-(unix*1000000);
                                    // Date object without considering microseconds
                                    var date = Ext.Date.parse(unix,'U');

                                    var range = chart.xAxisRange();
                                    var delta = range[1]-range[0];

                                    var clip = function(m){
                                        return (parseFloat('0.'+m)+"").substring(1);
                                    }
                                    if (delta<500000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==200000 || micro==400000 || micro==600000 || micro==800000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if (delta<1000000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==500000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if(delta<1000000*60) { // less the a minute
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i:s')+clip(micro);
                                        }
                                    }else if(delta<1000000*60*60) { // less the an hour
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d') + "T" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24*4) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12) {
                                            return Ext.Date.format(date,'Y-m-d') + "<br>" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else  { // less the a day
                                        return Ext.Date.format(date,'Y-m-d');
                                    }

                                }
                            },
                            y: {
                                valueFormatter: function(y) {
                                  return 'Base(' + y+ ')';
                                },
                                axisLabelFormatter: function(y) {
                                  return y;
                                }
                            },
                            y2: {
                                valueFormatter: function(y2) {
                                  return 'Runoff(' + y2+ ')';
                                },
                                axisLabelFormatter: function(y2) {
                                  return parseInt(y2);
                                }
                            }
                        },valueFormatter),
                        clickCallback: function(e, x, pts) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            // Series selectd
                            if (e.shiftKey && chartpanel.lastClick) {
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("seriesSelected", this, e, x, this.lastClick, pts);
                                }, chartpanel, [e, x, pts]);

                            }else{ // Single point selected
                                chartpanel.lastClick = x;
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("clickCallback", this, e, x, pts);
                                }, chartpanel, [e, x, pts]);
                            }

                        },
                        pointClickCallback: function(e, p) {

                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(e, p){
                                this.fireEvent("clickCallback", this, e, p['xval']);
                            }, chartpanel, [e, p]);
                        },
                        underlayCallback: function(canvas, area, g) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(canvas, area, g){
                                this.fireEvent("underlayCallback", this, canvas, area, g);
                            }, chartpanel, [canvas, area, g]);
                        }
                    }
                    );
            }else if (!Ext.isEmpty(this.chart)) {
                this.chart.updateOptions({
                    file: this.chartdata,
                    visibility: visibility,
                    labels: this.labels
                });
            }
            Ext.get('chartSeries-body').removeCls("viewerChart");
            Ext.get('chartSeries').unmask();
    },
    tabulate:function(data, columns) {
        Ext.get('show_result').mask("Initializing chart..");
        // d3.select('#show_result-body').remove();
        // Ext.get('show_result-body').reset();
        // d3.select('#show_result-body').transition();
        // var table = document.getElementById("#show_result-body").append('table');
        var table = d3.select('#show_result-body').append('table');
        // table.exit().remove();
        // table.destroy();
        var thead = table.append('thead');
        var tbody = table.append('tbody');

        Ext.get('show_result-body').removeCls("viewerChart");
        Ext.get('show_result').unmask();
        // append the header row
        thead.append('tr')
          .selectAll('th')
          .data(columns).enter()
          .append('th')
            .text(function (column) { return column; });

        // create a row for each object in the data
        var rows = tbody.selectAll('tr')
          .data(data)
          .enter()
          .append('tr');

        // create a cell in each row for each column
        var cells = rows.selectAll('td')
          .data(function (row) {
            return columns.map(function (column) {
              return {column: column, value: row[column]};
            });
          })
          .enter()
          .append('td')
            .text(function (d) { return d.value; });
            

        return table;
    },
    ConvertToCSV: function(objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '') line += ','
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    },
    download_csv: function(csv_data,csv_header,csv_name) {
        // var csv = 'Name,Color,Size\n';
        var csv = csv_header;
        csv+= this.ConvertToCSV(csv_data);
        console.log(csv);
        var hiddenElement = document.createElement('a');
        hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
        hiddenElement.target = '_blank';
        hiddenElement.download = csv_name+'.csv';
        hiddenElement.click();
    },
    download_format: function(jsondata) {
        this.downloadData = [];
        for (var i = 0; i < jsondata['data'].length; i++) {
            var rec = [];
            // rec.push(new Date(parseInt(jsondata['data'][i][0])/1000).toISOString());
            rec.push(istsos.utils.micro2iso(parseInt(jsondata['data'][i][0]),istsos.utils.tzToMinutes(Ext.getCmp('oeTZ').getValue())));
            var vals = jsondata['data'][i][1];
            var vals1 = jsondata['data'][i][2];
            rec = rec.concat(vals);
            rec = rec.concat(vals1);
            this.downloadData.push(rec);
        }
        return this.downloadData;
    },
    SelectedPropertyData: function(){
        this.obsprop1 = Ext.getCmp("oeCbObservedProperty").getValue();
        var procs = [];
        // get the json rapresentation of the tree menu of procedures
        //var checked = Ext.getCmp('proceduresTree').getValues();
        var template = [];
        var rst_label=[];

        this.chartStore1 = {};
        var cc = 1;
        var keys = Object.keys(pro);
        keys = keys.sort();
        //for (var key in this.procedures) {
        for (var c = 0; c < keys.length; c++) {
            var key = keys[c];
            // check if procedures loaded have the requested observed property
            if (Ext.Array.contains(pro[key].getObservedProperties(),this.obsprop1)) {
                procs.push(pro[key]);
                rst_label.push(key);
            }
        }
        // merging data
        var idx = 0;
        // Variable for pass
        var datepass = new Array();
        var valuepass = new Array();
        var qualitypass = new Array();
        //for (var key in procs) {
        for (var c = 0; c < procs.length; c++) {
            var p = procs[c];

            p.store.on("update",this._storeUpdated,this);
            p.store.on("seriesupdated",this._storeSeriesUpdated,this);
            this.rst_header=rst_label+"\n"+this.obsprop1+':iso8601'+","+this.obsprop1+","+this.obsprop1+':qualityIndex'+"\n";
            var recs = p.store.getRange();
            for (var j = 0, l = recs.length; j < l; j++) {
                if (Ext.isEmpty(this.chartStore1[recs[j].get("micro") ])) {
                    this.chartStore1[recs[j].get("micro")] = Ext.Array.clone(template);
                }
                // Set the property choosen in the chart store in the right column
                var v = parseFloat(recs[j].get(p.storeConvertFieldToId[this.obsprop1]));
                var q =parseFloat(recs[j].get(p.storeConvertFieldToId[this.obsprop1+':qualityIndex']))
                datepass[j]=recs[j].get("iso8601");
                valuepass[j]=v;
                qualitypass[j]=q;
            }
            idx++;
        }
        return [datepass, valuepass,qualitypass];       
    }
});
